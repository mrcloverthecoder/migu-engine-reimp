#version 330

struct Material
{
	sampler2D DiffuseTexture;
	sampler2D NormalTexture;
	
	bool HasNormalTexture;
	
	vec4 Diffuse;
	vec4 Ambient;
	vec4 Specular;
};

out vec4 Color;

in vec3 fNormal;
in vec2 fTexCoord;
in vec4 fColor;
in vec3 fPosition;

uniform Material uMaterial;

void main(void)
{
	vec4 mColor = texture(uMaterial.DiffuseTexture, fTexCoord);
	if(mColor.w < 0.01)
		discard;
	
	// Phong lighting
	/*vec3 normal = normalize(fNormal);
	if(uMaterial.HasNormalTexture)
	{
		vec3 normal = vec3(texture(uMaterial.NormalTexture, fTexCoord));
	}
	
	float ambientStrength = 0.1;
	
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	vec3 lightPos = vec3(2.0, 3.0, -3.0);
	
	//vec3 normal = normalize(fNormal);
	vec3 lightDir = normalize(lightPos - fPosition);
	
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;
	
	mColor = vec4(((lightColor * ambientStrength) + diffuse) * vec3(mColor), mColor.a);*/
	
	Color = mColor;
}